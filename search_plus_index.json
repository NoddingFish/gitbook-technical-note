{"./":{"url":"./","title":"介绍","keywords":"","body":"技术笔记 记录平时工作和学习中遇到的一些注意点，便于自己查找。 Copyright © whxuran.cn 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-03-21 14:18:25 var className='atoc';"},"gitbook/":{"url":"gitbook/","title":"Gitbook","keywords":"","body":"Gitbook 介绍一下gitbook中 book.json 的一些实用配置和插件。 Copyright © whxuran.cn 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-03-21 14:18:25 var className='atoc';"},"gitbook/Gitbook 一键部署至 GitHub Pages.html":{"url":"gitbook/Gitbook 一键部署至 GitHub Pages.html","title":"Gitbook 一键部署至 GitHub Pages","keywords":"","body":"Gitbook 一键部署至 GitHub Pages 参考：Gitbook 一键部署至 GitHub Pages 将书籍部署到 gh-pages 分支 这个步骤我使用了 gh-pages 这个工具，它可以将文件夹一键发布到 GitHub 项目下的 gh-pages 分支中（其他分支也可以发布，但是在本文下用到的就是 gh-pages 这个分支）。 首先先安装 gh-pages 工具 $ npm install -g gh-pages 输入以下指令，将 _book 下的所有文档部署到 gh-pages 分支 $ gh-pages -d _book 附加：如果安装速度太慢，建议使用淘宝 npm 镜像： 临时使用： $ npm --registry https://registry.npm.taobao.org install express 持久使用： $ npm config set registry https://registry.npm.taobao.org 配置后可通过下面方式来验证是否成功 $ npm config get registry Copyright © whxuran.cn 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-03-21 14:18:25 var className='atoc';"},"gitbook/plugins.html":{"url":"gitbook/plugins.html","title":"Gitbook 常用插件","keywords":"","body":"Gitbook 常用插件 在 book.json 中的 plugins 中加入： Gitbook 的不同主题配色方案 \"theme-default\": { \"showLevel\": true }, \"plugins\": [\"theme-comscore\"], expandable-chapters-small 可扩展导航章节 支持多层目录，比 Toggle Chapters 好用，点击箭头才能实现收放目录。不如 chapter-fold 好用。 { \"plugins\": [ \"expandable-chapters-small\" ] } chapter-fold 导航目录折叠 支持多层目录，点击导航栏的标题名就可以实现折叠扩展。 { \"plugins\": [\"chapter-fold\"] } github 在右上角添加github图标 { \"plugins\": [ \"github\" ], \"pluginsConfig\": { \"github\": { \"url\": \"https://github.com/zhangjikai\" } } } [!TIP] 以下是该 Gitbook 文档所使用的 book.json ： { \"title\" : \"技术笔记 · Gitbook\", \"author\" : \"打盹的鱼\", \"description\" : \"记录平时工作和学习中遇到的一些注意点\", \"language\" : \"zh-hans\", \"gitbook\" : \"3.2.3\", \"links\" : { \"sidebar\" : { \"个人网站\" : \"http://www.whxuran.cn\" } }, \"theme-default\": { \"showLevel\": true }, \"plugins\": [ \"expandable-chapters-small\", \"theme-comscore\", \"github\", \"search-pro\", \"-search\", \"-lunr\", \"back-to-top-button\", \"flexible-alerts\", \"include-codeblock\", \"ace\", \"tbfed-pagefooter\", \"atoc\" ], \"pluginsConfig\": { \"github\": { \"url\": \"https://github.com/NoddingFish\" }, \"flexible-alerts\": { \"style\": \"flat\", \"comment\": { \"label\": \"Comment\", \"icon\": \"fa fa-comments\", \"className\": \"info\" } }, \"include-codeblock\": { \"template\": \"ace\", \"unindent\": false, \"theme\": \"coffee\" }, \"tbfed-pagefooter\": { \"copyright\":\"Copyright &copy whxuran.cn 2019\", \"modify_label\": \"该文件修订时间：\", \"modify_format\": \"YYYY-MM-DD HH:mm:ss\" }, \"atoc\": { \"addClass\": true, \"className\": \"atoc\" } } } Copyright © whxuran.cn 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-03-21 14:18:25 var className='atoc';"},"php/":{"url":"php/","title":"PHP","keywords":"","body":"PHP 超文本预处理器，PHP: Hypertext Preprocessor Copyright © whxuran.cn 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-03-26 17:20:37 var className='atoc';"},"php/dnmp/":{"url":"php/dnmp/","title":"DNMP","keywords":"","body":" 目录 1.目录结构 2.快速使用 3.切换PHP版本 4.添加快捷命令 5.使用Log 5.1 Nginx日志 5.2 PHP-FPM日志 5.3 MySQL日志 6.使用composer 7.数据库管理 7.1 phpMyAdmin 7.2 phpRedisAdmin 8.在正式环境中安全使用 9.常见问题 9.1 如何在PHP代码中使用curl？ License DNMP（Docker + Nginx + MySQL + PHP7/5 + Redis）是一款全功能的LNMP一键安装程序。 DNMP项目特点： 100%开源 100%遵循Docker标准 支持多版本PHP共存，可任意切换（PHP5.4、PHP5.6、PHP7.2) 支持绑定任意多个域名 支持HTTPS和HTTP/2 PHP源代码、MySQL数据、配置文件、日志文件都可在Host中直接修改查看 内置完整PHP扩展安装命令 默认安装pdo_mysql、redis、xdebug、swoole等常用热门扩展，拿来即用 带有phpmyadmin和phpredisadmin数据库在线管理程序 实际项目中应用，确保100%可用 一次配置，Windows、Linux、MacOs皆可用 目录 1.目录结构 2.快速使用 3.切换PHP版本 4.添加快捷命令 5.使用Log 5.1 Nginx日志 5.2 PHP-FPM日志 5.3 MySQL日志 6.使用composer 7.数据库管理 7.1 phpMyAdmin 7.2 phpRedisAdmin 8.在正式环境中安全使用 9.常见问题 9.1 如何在PHP代码中使用curl？ 1.目录结构 / ├── conf 配置文件目录 │ ├── conf.d Nginx用户站点配置目录 │ ├── nginx.conf Nginx默认配置文件 │ ├── mysql.cnf MySQL用户配置文件 │ ├── php-fpm.conf PHP-FPM配置文件（部分会覆盖php.ini配置） │ └── php.ini PHP默认配置文件 ├── Dockerfile PHP镜像构建文件 ├── extensions PHP扩展源码包 ├── log Nginx日志目录 ├── mysql MySQL数据目录 ├── www PHP代码目录 └── source.list Debian源文件 结构示意图： 2.快速使用 本地安装git、docker和docker-compose。 clone项目： $ git clone https://github.com/yeszao/dnmp.git 如果不是root用户，还需将当前用户加入docker用户组： $ sudo gpasswd -a ${USER} docker 拷贝环境配置文件env.sample为.env，启动： $ cd dnmp $ cp env.sample .env # Windows系统请用copy命令，或者用编辑器打开后另存为.env $ docker-compose up 注意：Windows安装360安全卫士的同学，请先将其退出，不然安装过程中可能Docker创建账号过程可能被拦截，导致启动时文件共享失败； 访问在浏览器中访问： http://localhost： 默认http站点 https://localhost：自定义证书https站点，访问时浏览器会有安全提示，忽略提示访问即可 两个站点使用同一PHP代码：./www/localhost/index.php。 要修改端口、日志文件位置、以及是否替换source.list文件等，请修改.env文件，然后重新构建： $ docker-compose build php54 # 重建单个服务 $ docker-compose build # 重建全部服务 3.切换PHP版本 默认情况下，我们同时创建 PHP5.4、PHP5.6和PHP7.2 三个PHP版本的容器， 切换PHP仅需修改相应站点 Nginx 配置的fastcgi_pass选项， 例如，示例的 http://localhost 用的是PHP5.4，Nginx 配置： fastcgi_pass php54:9000; 要改用PHP7.2，修改为： fastcgi_pass php72:9000; 再 重启 Nginx 生效。 $ docker exec -it dnmp_nginx_1 nginx -s reload 4.添加快捷命令 在开发的时候，我们可能经常使用docker exec -it切换到容器中，把常用的做成命令别名是个省事的方法。 打开~/.bashrc，加上： alias dnginx='docker exec -it dnmp_nginx_1 /bin/sh' alias dphp72='docker exec -it dnmp_php72_1 /bin/bash' alias dphp56='docker exec -it dnmp_php56_1 /bin/bash' alias dphp54='docker exec -it dnmp_php54_1 /bin/bash' alias dmysql='docker exec -it dnmp_mysql_1 /bin/bash' alias dredis='docker exec -it dnmp_redis_1 /bin/sh' 5.使用Log Log文件生成的位置依赖于conf下各log配置的值。 5.1 Nginx日志 Nginx日志是我们用得最多的日志，所以我们单独放在根目录log下。 log会目录映射Nginx容器的/var/log/nginx目录，所以在Nginx配置文件中，需要输出log的位置，我们需要配置到/var/log/nginx目录，如： error_log /var/log/nginx/nginx.localhost.error.log warn; 5.2 PHP-FPM日志 大部分情况下，PHP-FPM的日志都会输出到Nginx的日志中，所以不需要额外配置。 另外，建议直接在PHP中打开错误日志： error_reporting(E_ALL); ini_set('error_reporting', 'on'); ini_set('display_errors', 'on'); 如果确实需要，可按一下步骤开启（在容器中）。 进入容器，创建日志文件并修改权限： $ docker exec -it dnmp_php_1 /bin/bash $ mkdir /var/log/php $ cd /var/log/php $ touch php-fpm.error.log $ chmod a+w php-fpm.error.log 主机上打开并修改PHP-FPM的配置文件conf/php-fpm.conf，找到如下一行，删除注释，并改值为： php_admin_value[error_log] = /var/log/php/php-fpm.error.log 重启PHP-FPM容器。 5.3 MySQL日志 因为MySQL容器中的MySQL使用的是mysql用户启动，它无法自行在/var/log下的增加日志文件。所以，我们把MySQL的日志放在与data一样的目录，即项目的mysql目录下，对应容器中的/var/lib/mysql/目录。 slow-query-log-file = /var/lib/mysql/mysql.slow.log log-error = /var/lib/mysql/mysql.error.log 以上是mysql.conf中的日志文件的配置。 6.使用composer 我们建议在主机HOST中使用composer，避免PHP容器变得庞大。 在主机创建一个目录，用以保存composer的配置和缓存文件： mkdir ~/dnmp/composer 打开主机的 ~/.bashrc 或者 ~/.zshrc 文件，加上： composer () { tty= tty -s && tty=--tty docker run \\ $tty \\ --interactive \\ --rm \\ --user $(id -u):$(id -g) \\ --volume ~/dnmp/composer:/tmp \\ --volume /etc/passwd:/etc/passwd:ro \\ --volume /etc/group:/etc/group:ro \\ --volume $(pwd):/app \\ composer \"$@\" } 让文件起效： source ~/.bashrc 在主机的任何目录下就能用composer了： cd ~/dnmp/www/ composer create-project yeszao/fastphp project --no-dev （可选）如果提示需要依赖，用--ignore-platform-reqs --no-scripts关闭依赖检测。 （可选）第一次使用 composer 会在 ~/dnmp/composer 目录下生成一个config.json文件，可以在这个文件中指定国内仓库，例如： { \"config\": {}, \"repositories\": { \"packagist\": { \"type\": \"composer\", \"url\": \"https://packagist.laravel-china.org\" } } } 7.数据库管理 本项目默认在docker-compose.yml中开启了用于MySQL在线管理的phpMyAdmin，以及用于redis在线管理的phpRedisAdmin，可以根据需要修改或删除。 7.1 phpMyAdmin phpMyAdmin容器映射到主机的端口地址是：8080，所以主机上访问phpMyAdmin的地址是： http://localhost:8080 MySQL连接信息： host：(本项目的MySQL容器网络) port：3306 username：（手动在phpmyadmin界面输入） password：（手动在phpmyadmin界面输入） 7.2 phpRedisAdmin phpRedisAdmin容器映射到主机的端口地址是：8081，所以主机上访问phpMyAdmin的地址是： http://localhost:8081 Redis连接信息如下： host: (本项目的Redis容器网络) port: 6379 8.在正式环境中安全使用 要在正式环境中使用，请： 在php.ini中关闭XDebug调试 增强MySQL数据库访问的安全策略 增强redis访问的安全策略 9.常见问题 9.1 如何在PHP代码中使用curl？ 参考这个issue：https://github.com/yeszao/dnmp/issues/91 License MIT Copyright © whxuran.cn 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-04-12 14:10:04 var className='atoc';"},"php/dnmp/DNMP 使用过程中注意点.html":{"url":"php/dnmp/DNMP 使用过程中注意点.html","title":"DNMP 使用过程中注意点","keywords":"","body":"DNMP 使用 MySQL 和 Redis 连接问题 # MySQL 项目中： mysql root 123456 # 服务器地址 用户名 密码 # MySQL Navicat连接： localhost root 123456 # 服务器地址 用户名 密码 # Redis 项目中： redis root # 服务器地址 用户名 密码为空 # Redis Medis连接： 127.27.0.1 root # 服务器地址 用户名 密码为空 进入容器中 在 windows 中输入命令需要加 winpty $ winpty docker exec -it dnmp_mysql_1 bash 命令 $ docker-compose up { -d } # 启动命令 -d 后台启动 $ docker-compose down # 关闭 $ docker-compose restart # 重启 $ docker-compose build { php72 } # 重建 使用 composer 我这里还是在容器中安装 composer ，具体如下： 编辑文件： vim Dockerfile ，增加以下代码： # 安装 composer 并修改为国内镜像 RUN curl -sS https://getcomposer.org/installer | php \\ && mv composer.phar /usr/local/bin/composer \\ && composer config -g repo.packagist composer https://packagist.laravel-china.org 之后重建 php ： $ docker-compose build php72 # 注意一点，我这边重建的是 php72 , 也可以重构其他的版本或者全部重建 最后启动以下进入容器查看是否安装成功： $ docker-compose up -d $ winpty docker exec -it dnmp_php72_1 bash # windows 中使用 winpty $ composer config -gl # 可以查看 composer 配置 使用 Xdebug 配置 php.ini ： [XDebug] ; Debug Config xdebug.remote_enable = 1 xdebug.remote_handler = \"dbgp\" ;xdebug.remote_connect_back = 1 xdebug.remote_port = 9000 xdebug.idekey = PHPSTORM # host.docker.internal 是 windows 下 docker 获取host xdebug.remote_host = host.docker.internal ;xdebug.remote_log = \"/var/log/dnmp/php.xdebug.log\" Copyright © whxuran.cn 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-05-14 09:31:58 var className='atoc';"},"php/mysql/":{"url":"php/mysql/","title":"MySQL","keywords":"","body":"介绍 MySql 是一个关系型数据库管理系统。 Copyright © whxuran.cn 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-04-08 14:31:10 var className='atoc';"},"php/mysql/mysql 常见问题.html":{"url":"php/mysql/mysql 常见问题.html","title":"MySQL 常见问题","keywords":"","body":"MySql 常见问题记录 Navicat 连接 MySQL 8 出现 2059 错误 错误： 使用Navicat Premium 连接MySQL时出现如下错误： 原因： mysql 8 之前的版本中加密规则是 mysql_native_password ，而在 mysql 8 之后，加密规则是 caching_sha2_password 。 解决： 更改加密规则 $ mysql -uroot -ppassword #登录 > use mysql; #选择数据库 > ALTER USER 'root'@'localhost' IDENTIFIED BY 'password' PASSWORD EXPIRE NEVER; #更改加密方式 localhost 可以是 % > ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password'; #更新用户密码 localhost 可以是 % > FLUSH PRIVILEGES; #刷新权限 Copyright © whxuran.cn 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-04-09 17:13:09 var className='atoc';"},"php/nginx/":{"url":"php/nginx/","title":"Nginx","keywords":"","body":"Nginx Nginx 是一个高性能的HTTP和反向代理web服务器 Copyright © whxuran.cn 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-04-22 19:04:22 var className='atoc';"},"php/nginx/nginx 常见问题.html":{"url":"php/nginx/nginx 常见问题.html","title":"Nginx 常见问题","keywords":"","body":" Nginx 常见问题 Nginx转发的服务请求头header中不能含有下划线 解决： Nginx 常见问题 Nginx转发的服务请求头header中不能含有下划线 https://www.cnblogs.com/huchong/p/10246031.html 解决： header中自定义变量名时不要用下划线； 在 nginx.conf 中加上 underscores_in_headers on 配置： http { include mime.types; default_type application/octet-stream; sendfile on; underscores_in_headers on; keepalive_timeout 65; } Copyright © whxuran.cn 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-04-22 19:23:44 var className='atoc';"},"php/apache/":{"url":"php/apache/","title":"Apache","keywords":"","body":"Apache Copyright © whxuran.cn 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-08-02 10:57:37 var className='atoc';"},"php/apache/apache 常见问题.html":{"url":"php/apache/apache 常见问题.html","title":"Apache 常见问题","keywords":"","body":"Apache 常见问题 1、权限不足（Permission denied） 1、权限不足（Permission denied） thinkphp5 中设置了 runtime 文件夹权限，但还会出现权限不足的情况 # 设置 runtime 的777权限 chmod -R 777 runtime # 设置 runtime 的用户组 chown -R www runtime 若还是不可以，请查看 httpd.conf 下的配置： # 位置一般在：/usr/local/apache/conf/httpd.conf # 找到 User 和 Group 修改如下，我这边修改的是 www，也可是apache User www Group www # 重启 apache /etc/init.d/httpd restart Copyright © whxuran.cn 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-08-02 11:10:44 var className='atoc';"},"php/swoole/":{"url":"php/swoole/","title":"Swoole","keywords":"","body":"介绍 Swoole 是面向生产环境的 PHP 异步网络通信引擎。 Copyright © whxuran.cn 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-04-08 09:43:06 var className='atoc';"},"php/swoole/安装 Swoole.html":{"url":"php/swoole/安装 Swoole.html","title":"安装 Swoole","keywords":"","body":"安装 Swoole Swoole 是 PHP 的一个扩展，可以通过 PHP 扩展的方式进行安装和启用。 本地安装 1、Laradock 在本地安装的话，以 Laradock 为例，需要在 laradock 目录下的 .env 中将下面两行配置值设置为 true ： WORKSPACE_INSTALL_SWOOLE=true PHP_FPM_INSTALL_SWOOLE=true 然后运行: $ docker-compose build php-fpm workspace 重新构建 Docker 容器，构建完成后重启这两个容器，进入 workspace 容器，运行 php -m 查看 swoole 是否安装成功，如果扩展列表包含 swoole 则表示安装成功。 2、Windows/Mac 如果是本地 Windows/Mac 系统上安装的话，直接执行以下命令安装接口： $ pecl install swoole 前提是 pecl 命令在系统路径中可用。然后运行 php -m 看到扩展列表包含 swoole 则表明安装成功。 线上安装 如果是在服务器安装的话，以 Ubuntu 系统为例，通过执行下列命令安装即可： $ pecl install swoole 然后通过 php -i | grep php.ini 定位 php.ini 文件所在位置，并打开该配置文件，在文件末尾追加如下内容： [swoole] extension=swoole.so 保存并退出，在终端运行 php -m，如果看到扩展里包含 swoole，说明安装启用成功。 注：以上服务器安装方式也适用于 Homestead 和其他环境 Ubuntu 系统。 本文摘自 基于 Swoole 构建高性能 Laravel 应用系列 —— Swoole 安装与入门 Copyright © whxuran.cn 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-05-13 19:17:18 var className='atoc';"},"php/phpstorm/":{"url":"php/phpstorm/","title":"PhpStorm","keywords":"","body":"PhpStorm 高效智能的 PHP IDE 支持主流框架 PhpStorm完美支持Symfony、Drupal、WordPress、Zend Framework、Laravel、Magento、 Joomla!、CakePHP、Yii ...等各种主流框架。 全能的PHP工具 内建编辑器实际“了解”您的代码并且深刻理解其结构，支持所有PHP语言功能， 在开发现代技术和维护遗留项目皆可完美适用。它提供最优秀的代码补全、重构、实时错误预防等等功能。 涵盖前端开发技术 提供的重构、调试和单元测试...等功能来辅助进行最先进的前端开发技术，如：HTML 5、CSS、Sass、 Less、Stylus、CoffeeScript、TypeScript、Emmet和JavaScript。 通过实时编辑功能，可以立刻在浏览器中查看变更。 内建开发者工具 通过集成版本控制系统、支持远程部署、数据库/SQL、命令行工具、Vagrant、Composer、 REST客户端和多种其他工具，可以直接在IDE内执行很多日常任务。 PhpStorm = WebStorm + PHP + DB/SQL PhpStorm包含WebStorm的所有功能，完全支持PHP，并且还增加了对数据库/SQL的支持。 Copyright © whxuran.cn 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-04-26 14:00:29 var className='atoc';"},"php/phpstorm/phpstorm使用.html":{"url":"php/phpstorm/phpstorm使用.html","title":"PhpStorm使用","keywords":"","body":"PhpStorm使用 1、在 Terminal 中使用 git-bash ： 打开 phpstorm 设置，修改 Tooles -> Terminal 中的 Shell path 为： D:\\SoftWare\\Git\\bin\\sh.exe #修改为自己安装 git-bash 的位置 2、在 Terminal 使用中可能会出现乱码的问题： 在 ~/.bashrc 文件中加入一下代码，重启 IDEA # 解决IDEA下的terminal中文Unicode编码问题 export LANG=\"zh_CN.UTF-8\" export LC_ALL=\"zh_CN.UTF-8\" Copyright © whxuran.cn 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-04-26 14:18:08 var className='atoc';"},"html/":{"url":"html/","title":"HTML","keywords":"","body":"HTML 超文本标记语言 Hyper Text Markup Language Copyright © whxuran.cn 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-11-06 15:35:28 var className='atoc';"},"html/layui/":{"url":"html/layui/","title":"Layui","keywords":"","body":"Layui layui - 经典模块化前端 UI 框架 layuiAdmin pro v1.x 开发者文档 点击查看文档 Copyright © whxuran.cn 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-04-12 14:10:04 var className='atoc';"},"html/layui/layui使用过程中注意点.html":{"url":"html/layui/layui使用过程中注意点.html","title":"Layui 使用过程中注意点","keywords":"","body":"Layui 使用过程中注意点 1、如果 layui 数据表格列宽自适应出现横向滚动条的解决方案： 正常情况下，自适应的列宽不会导致 table 容器出现滚动条。如果你的出现了，请按照下述方案解决： 如果 table 是在 layui 的后台布局容器中（注意：不是在 iframe 中），在你的页面加上这段 CSS： .layui-body{overflow-y: scroll;} 如果 table 是在独立的页面，在你的页面加上这段 CSS： body{overflow-y: scroll;} 总体而言，table 列宽自适应出现横向滚动条的几率一般是比较小的，主要原因是 table 的渲染有时会在浏览器纵向滚动条出现之前渲染完毕，这时 table 容器会被强制减少滚动条宽度的差（一般是 17px），导致 table 的横向滚动条出现。建议强制给你的页面显示出纵向滚动条。 若还不能解决： .layui-table-body{overflow-x: hidden;} 如果 layui 数据表格列宽自适应出现横向滚动条的解决方案 2、Layui 第三方组件： formSelects 4.x 引入后需要渲染： formSelects.render(); formSelects-v4.js 基于Layui的多选解决方案 3、Layui 中弹出层的 btn 提交 form 表单； 思路： 在 form 表单中设置隐藏的 button ，用弹出层中的提交按钮 click 隐藏的 button。 在弹出层的 form 表单中加入一下 html ，隐藏： 提交 js 中可以这么写： admin.popup({ id: 'layor-popup-order-single' , title: '编辑菜单' , anim: -1 , area: ['50%', '60%'] , shade: [0.5, '#000000'] , skin: 'layui-anim layui-anim-upbit layor-body' , btn: ['提交'] , success: function () { view(this.id).render('auth/menu/editView', node).then(function () { }).done(function () { //页面加载后的回调 do something form.render();//渲染页面 }) }, yes: function (index, layero) { layero.find('.menuSubmit').click();//点击隐藏的按钮 } }); 参考：layer弹出层里的里form如何监听事件在弹出层的按钮上? 4、表格中使用下拉选择框 增加的 css 样式： /* 防止下拉框的下拉列表被隐藏---必须设置--- 此样式和表格的样式有冲突 如果表格列数太多 会出现错乱的情况 目前我的解决方法是忽略下拉框的美化渲染 */ .layui-table-cell { overflow: visible; } .layui-table-box { overflow: visible; } .layui-table-body { overflow: visible; } /* 设置下拉框的高度与表格单元相同 */ td .layui-form-select{ margin-top: -10px; margin-left: -15px; margin-right: -15px; } 效果如图所示： 5、Layui 阻止冒泡 html 增加点击事件阻止冒泡，复选框需要注意： //TODO 阻止冒泡（checkbox & input） $(\".stopBubble\").off('click').on('click', function (that) { layui.stope(that);//阻止冒泡 }); Copyright © whxuran.cn 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-09-09 19:46:39 var className='atoc';"},"html/layui/layui组件.html":{"url":"html/layui/layui组件.html","title":"Layui 组件","keywords":"","body":"Layui 组件 1、formSelects 4.x 多选下拉框 2、Dtree 树形组件 1、formSelects 4.x 多选下拉框 formSelects-v4.js 基于Layui的多选解决方案 2、Dtree 树形组件 dtree 数据树文档 - layui.dtree Copyright © whxuran.cn 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-06-20 10:16:38 var className='atoc';"},"html/Vue/":{"url":"html/Vue/","title":"Vue","keywords":"","body":"Vue Vue.js 是什么 Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。 如果你想在深入学习 Vue 之前对它有更多了解，我们制作了一个视频，带您了解其核心概念和一个示例工程。 如果你已经是有经验的前端开发者，想知道 Vue 与其它库/框架有哪些区别，请查看对比其它框架。 Copyright © whxuran.cn 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-11-06 15:37:12 var className='atoc';"},"html/Vue/Learn/前置环境.html":{"url":"html/Vue/Learn/前置环境.html","title":"前置环境","keywords":"","body":"前置环境 一、安装 windows 安装 node： 官方网址 npm 是 node.js 的包管理器，安装 node.js 会连同 node 和 npm 一起安装。 windows 安装 vue-cli ： npm install -g vue-cli npm install -g @vue/cli # vue3.0后的安装方式，推荐使用 二、创建 vue 项目 命令行的方式 vue create 项目名称 GUI 的方式 vue ui #浏览器访问 http://localhost:8000 注意： windows 下 Git Bash 运行 vue create project-name 出现无法通过上下按键选择安装方式： 则需要在 Git Bash 的安装目录找到 etc/bash.bashrc 的文件并再末尾增加： alias vue='winpty vue.cmd' 重新启动 Git Bash 即可。 Copyright © whxuran.cn 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-11-06 17:16:03 var className='atoc';"},"go/":{"url":"go/","title":"Go","keywords":"","body":"Go Go 是一个开源的编程语言，它能让构造简单、可靠且高效的软件变得容易。 第一个 Go 程序 hello.go ： package main import \"fmt\" func main() { fmt.Println(\"Hello, World!\") } 执行以上代码输出： $ go run hello.go Hello, World! Copyright © whxuran.cn 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-03-21 14:18:25 var className='atoc';"},"go/安装 Go.html":{"url":"go/安装 Go.html","title":"安装 Go","keywords":"","body":"安装 Go 文档：http://www.runoob.com/go/go-environment.html Copyright © whxuran.cn 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-03-21 14:18:25 var className='atoc';"},"go/beego.html":{"url":"go/beego.html","title":"Beego 安装和 Bee 工具的使用","keywords":"","body":"beego 安装和 bee 工具的使用 beego 简介 beego 是一个快速开发 Go 应用的 HTTP 框架，他可以用来快速开发 API、Web 及后端服务等各种应用，是一个 RESTful 的框架，主要设计灵感来源于 tornado、sinatra 和 flask 这三个框架，但是结合了 Go 本身的一些特性（interface、struct 嵌入等）而设计的一个框架。 beego 安装 Beego 的安装是典型的 Go 安装包的形式： $ go get github.com/astaxie/beego 常见问题： git 没有安装，请自行安装不同平台的 git，如何安装请自行搜索。 git https 无法获取，请配置本地的 git，关闭 https 验证： $ git config --global http.sslVerify false 参考：Beego 安装 bee 工具的使用 bee 工具简介 bee 工具是一个为了协助快速开发 beego 项目而创建的项目，通过 bee 您可以很容易的进行 beego 项目的创建、热编译、开发、测试、和部署。 bee 工具的安装 您可以通过如下的方式安装 bee 工具： $ go get github.com/beego/bee 安装完之后，bee 可执行文件默认存放在 $GOPATH/bin 里面，所以您需要把 $GOPATH/bin 添加到您的环境变量中，才可以进行下一步。 报错： golang.org/x/net/html $ bee run ______ | ___ \\ | |_/ / ___ ___ | ___ \\ / _ \\ / _ \\ | |_/ /| __/| __/ \\____/ \\___| \\___| v1.10.0 2019/03/19 13:37:27 INFO ▶ 0001 Using 'dingdian' as 'appname' 2019/03/19 13:37:27 INFO ▶ 0002 Initializing watcher... ..\\github.com\\andybalholm\\cascadia\\parser.go:11:2: cannot find package \"golang.org/x/net/html\" in any of: E:\\Go\\src\\golang.org\\x\\net\\html (from $GOROOT) C:\\Users\\Admin\\go\\src\\golang.org\\x\\net\\html (from $GOPATH) 2019/03/19 13:37:28 ERROR ▶ 0003 Failed to build the application: ..\\github.com\\andybalholm\\cascadia\\parser.go:11:2: cannot find package \"golang.org/x/net/html\" in any of: E:\\Go\\src\\golang.org\\x\\net\\html (from $GOROOT) C:\\Users\\Admin\\go\\src\\golang.org\\x\\net\\html (from $GOPATH) 解决（golang.org/x/net 安装方法）： $ mkdir -p $GOPATH/src/golang.org/x/ $ cd $GOPATH/src/golang.org/x/ $ git clone https://github.com/golang/net.git net $ go install net 执行 go install 之后没有提示，就说明安装好了。 参考：Bee 工具使用 Copyright © whxuran.cn 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-03-21 14:18:25 var className='atoc';"}}