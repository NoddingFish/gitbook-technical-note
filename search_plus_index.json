{"./":{"url":"./","title":"介绍","keywords":"","body":"技术笔记 记录平时工作和学习中遇到的一些注意点，便于自己查找。 "},"gitbook/":{"url":"gitbook/","title":"Gitbook","keywords":"","body":"Gitbook 介绍一下gitbook中 book.json 的一些实用配置和插件。 "},"gitbook/Gitbook 一键部署至 GitHub Pages.html":{"url":"gitbook/Gitbook 一键部署至 GitHub Pages.html","title":"Gitbook 一键部署至 GitHub Pages","keywords":"","body":"Gitbook 一键部署至 GitHub Pages 参考：Gitbook 一键部署至 GitHub Pages 将书籍部署到 gh-pages 分支 这个步骤我使用了 gh-pages 这个工具，它可以将文件夹一键发布到 GitHub 项目下的 gh-pages 分支中（其他分支也可以发布，但是在本文下用到的就是 gh-pages 这个分支）。 首先先安装 gh-pages 工具 $ npm install -g gh-pages 输入以下指令，将 _book 下的所有文档部署到 gh-pages 分支 $ gh-pages -d _book 附加：如果安装速度太慢，建议使用淘宝 npm 镜像： 临时使用： $ npm --registry https://registry.npm.taobao.org install express 持久使用： $ npm config set registry https://registry.npm.taobao.org 配置后可通过下面方式来验证是否成功 $ npm config get registry "},"gitbook/plugins.html":{"url":"gitbook/plugins.html","title":"Gitbook 常用插件","keywords":"","body":"Gitbook 常用插件 在 book.json 中的 plugins 中加入： Gitbook 的不同主题配色方案 \"theme-default\": { \"showLevel\": true }, \"plugins\": [\"theme-comscore\"], expandable-chapters-small 可扩展导航章节 支持多层目录，比 Toggle Chapters 好用，点击箭头才能实现收放目录。不如 chapter-fold 好用。 { \"plugins\": [ \"expandable-chapters-small\" ] } chapter-fold 导航目录折叠 支持多层目录，点击导航栏的标题名就可以实现折叠扩展。 { \"plugins\": [\"chapter-fold\"] } github 在右上角添加github图标 { \"plugins\": [ \"github\" ], \"pluginsConfig\": { \"github\": { \"url\": \"https://github.com/zhangjikai\" } } } [!TIP] 以下是该 Gitbook 文档所使用的 book.json ： { \"title\" : \"技术笔记 · Gitbook\", \"author\" : \"打盹的鱼\", \"description\" : \"记录平时工作和学习中遇到的一些注意点\", \"language\" : \"zh-hans\", \"gitbook\" : \"3.2.3\", \"links\" : { \"sidebar\" : { \"个人网站\" : \"http://www.whxuran.cn\" } }, \"theme-default\": { \"showLevel\": true }, \"plugins\": [ \"expandable-chapters-small\", \"theme-comscore\", \"github\", \"search-pro\", \"-search\", \"-lunr\", \"back-to-top-button\", \"flexible-alerts\", \"include-codeblock\", \"ace\" ], \"pluginsConfig\": { \"github\": { \"url\": \"https://github.com/NoddingFish\" }, \"flexible-alerts\": { \"style\": \"flat\", \"comment\": { \"label\": \"Comment\", \"icon\": \"fa fa-comments\", \"className\": \"info\" } }, \"include-codeblock\": { \"template\": \"ace\", \"unindent\": false, \"theme\": \"coffee\" } } } "},"swoole/":{"url":"swoole/","title":"Swoole","keywords":"","body":"介绍 Swoole 是面向生产环境的 PHP 异步网络通信引擎。 "},"swoole/安装 Swoole.html":{"url":"swoole/安装 Swoole.html","title":"安装 Swoole","keywords":"","body":"安装 Swoole Swoole 是 PHP 的一个扩展，可以通过 PHP 扩展的方式进行安装和启用。 本地安装 1、Laradock 在本地安装的话，以 Laradock 为例，需要在 laradock 目录下的 .env 中将下面两行配置值设置为 true ： WORKSPACE_INSTALL_SWOOLE=true PHP_FPM_INSTALL_SWOOLE=true 然后运行: $ docker-compose build php-fpm workspace 重新构建 Docker 容器，构建完成后重启这两个容器，进入 workspace 容器，运行 php -m 查看 swoole 是否安装成功，如果扩展列表包含 swoole 则表示安装成功。 2、Windows/Mac 如果是本地 Windows/Mac 系统上安装的话，直接执行以下命令安装接口： $ pecl install swoole 前提是 pecl 命令在系统路径中可用。然后运行 php -m 看到扩展列表包含 swoole 则表明安装成功。 线上安装 如果是在服务器安装的话，以 Ubuntu 系统为例，通过执行下列命令安装即可： $ pecl install swoole 然后通过 php -i | grep php.ini 定位 php.ini 文件所在位置，并打开该配置文件，在文件末尾追加如下内容： [swoole] extension=swoole.so 保存并退出，在终端运行 php -m，如果看到扩展里包含 swoole，说明安装启用成功。 注：以上服务器安装方式也适用于 Homestead 和其他环境 Ubuntu 系统。 本文摘自 基于 Swoole 构建高性能 Laravel 应用系列 —— Swoole 安装与入门 "},"go/":{"url":"go/","title":"Go","keywords":"","body":"Go Go 是一个开源的编程语言，它能让构造简单、可靠且高效的软件变得容易。 第一个 Go 程序 hello.go ： package main import \"fmt\" func main() { fmt.Println(\"Hello, World!\") } 执行以上代码输出： $ go run hello.go Hello, World! "},"go/安装 Go.html":{"url":"go/安装 Go.html","title":"安装 Go","keywords":"","body":"安装 Go 文档：http://www.runoob.com/go/go-environment.html "},"go/beego.html":{"url":"go/beego.html","title":"Beego 安装和 Bee 工具的使用","keywords":"","body":"beego 安装和 bee 工具的使用 beego 简介 beego 是一个快速开发 Go 应用的 HTTP 框架，他可以用来快速开发 API、Web 及后端服务等各种应用，是一个 RESTful 的框架，主要设计灵感来源于 tornado、sinatra 和 flask 这三个框架，但是结合了 Go 本身的一些特性（interface、struct 嵌入等）而设计的一个框架。 beego 安装 Beego 的安装是典型的 Go 安装包的形式： $ go get github.com/astaxie/beego 常见问题： git 没有安装，请自行安装不同平台的 git，如何安装请自行搜索。 git https 无法获取，请配置本地的 git，关闭 https 验证： $ git config --global http.sslVerify false 参考：Beego 安装 bee 工具的使用 bee 工具简介 bee 工具是一个为了协助快速开发 beego 项目而创建的项目，通过 bee 您可以很容易的进行 beego 项目的创建、热编译、开发、测试、和部署。 bee 工具的安装 您可以通过如下的方式安装 bee 工具： $ go get github.com/beego/bee 安装完之后，bee 可执行文件默认存放在 $GOPATH/bin 里面，所以您需要把 $GOPATH/bin 添加到您的环境变量中，才可以进行下一步。 报错： golang.org/x/net/html $ bee run ______ | ___ \\ | |_/ / ___ ___ | ___ \\ / _ \\ / _ \\ | |_/ /| __/| __/ \\____/ \\___| \\___| v1.10.0 2019/03/19 13:37:27 INFO ▶ 0001 Using 'dingdian' as 'appname' 2019/03/19 13:37:27 INFO ▶ 0002 Initializing watcher... ..\\github.com\\andybalholm\\cascadia\\parser.go:11:2: cannot find package \"golang.org/x/net/html\" in any of: E:\\Go\\src\\golang.org\\x\\net\\html (from $GOROOT) C:\\Users\\Admin\\go\\src\\golang.org\\x\\net\\html (from $GOPATH) 2019/03/19 13:37:28 ERROR ▶ 0003 Failed to build the application: ..\\github.com\\andybalholm\\cascadia\\parser.go:11:2: cannot find package \"golang.org/x/net/html\" in any of: E:\\Go\\src\\golang.org\\x\\net\\html (from $GOROOT) C:\\Users\\Admin\\go\\src\\golang.org\\x\\net\\html (from $GOPATH) 解决（golang.org/x/net 安装方法）： $ mkdir -p $GOPATH/src/golang.org/x/ $ cd $GOPATH/src/golang.org/x/ $ git clone https://github.com/golang/net.git net $ go install net 执行 go install 之后没有提示，就说明安装好了。 参考：Bee 工具使用 "}}